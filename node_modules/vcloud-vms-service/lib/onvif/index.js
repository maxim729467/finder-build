const onvif = require("node-onvif");

const { COMMANDS } = require("./config");

class ONVIFCamera {
  constructor() {
    this.camera = null;
  }

  async makeStreamURL({ ip, port }) {
    try {
      let xaddr = `http://${ip}:${port || 80}/onvif/device_service`;

      if (!port) {
        const foundCameras = await onvif.startProbe();
        console.log("LOCAL CAMERAS:", foundCameras);

        if (!foundCameras.length) {
          throw new Error("Can't find any camera !");
        }

        for (let i = 0; i < foundCameras.length; i++) {
          const isExistXaddr = foundCameras[i].xaddrs.find((xaddr) =>
            xaddr.includes(ip)
          );
          if (isExistXaddr) {
            xaddr = isExistXaddr;
            break;
          }
        }
      }

      return xaddr;
    } catch (err) {
      console.log(`MADE XADDR FAILED ${err.message}`);
      throw new Error(err.message);
    }
  }

  async init(options) {
    try {
      console.log(
        `INIT ONVIF START: IP = ${options.ip} PORT = ${options.port}`
      );

      const xaddr = await this.makeStreamURL(options);
      console.log(`XADDR: ${xaddr}`);
      this.camera = new onvif.OnvifDevice({
        xaddr,
        user: options.user,
        pass: options.pass,
      });
      await this.camera.init();
      console.log("INIT ONVIF COMPLETE");
      // let streamUrl = this.camera.getUdpStreamUrl();
      // console.log({ streamUrl });
    } catch (err) {
      console.log(`INIT ONVIF FAILED ${err.message}`);
      // throw new Error(err.message);
      console.log("fail log");
    }
  }

  move(command) {
    // Move the camera
    this.camera.ptzMove({ speed: COMMANDS[command], timeout: 1 });
  }

  stop() {
    // Stop the camera
    this.camera.ptzStop();
  }
}

module.exports = ONVIFCamera;
